def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY') || '${ConfigurationType}' == 'library';
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion $(AndroidAPILevelNumber)
    buildToolsVersion "$(AndroidBuildToolsVersion)"

    defaultConfig {
        $(ApplicationId)
        minSdkVersion 21
        targetSdkVersion $(AndroidAPILevelNumber)
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
        debug {
            debuggable = true
        }
    }
    
	flavorDimensions 'cpuArch'
    productFlavors {
        full {
            dimension 'cpuArch'
            ndk {
                abiFilter 'armeabi-v7a'
                abiFilter 'arm64-v8a'
            }
        }
        arm7 {
            dimension 'cpuArch'
            ndk {
                abiFilter 'armeabi-v7a'
            }
        }
        arm8 {
            dimension 'cpuArch'
            ndk {
                abiFilter 'arm64-v8a'
            }
        }
        x86 {
            dimension 'cpuArch'
            ndk {
                abiFilter 'x86'
            }
        }
        'x86-64' {
            dimension 'cpuArch'
            ndk {
                abiFilter 'x86_64'
            }
        }
    }
    
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
    }

    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    $(AarDependencies)
}